finalization
finalizeReference: oop 
	"During sweep phase we have encountered a weak reference. 
	Check if  its object has gone away (or is about to) and if so, signal a 
	semaphore. "
	"Do *not* inline this in sweepPhase - it is quite an unlikely 
	case to run into a weak reference"
	| weakOop oopGone chunk firstField lastField nonWeakCnt |
	<inline: false>
	<var: #oop type: 'usqInt'>
	<var: #weakOop type: 'usqInt'>
	nonWeakCnt := self nonWeakFieldsOf: oop.
	firstField := BaseHeaderSize + (nonWeakCnt << ShiftForWord).
	lastField := self lastPointerOf: oop.
	firstField to: lastField by: BytesPerWord do: [:i | 
			weakOop := self longAt: oop + i.
			"ar 1/18/2005: Added oop < youngStart test to make sure we're not testing
			objects in non-GCable region. This could lead to a forward reference in
			old space with the oop pointed to not being marked and thus treated as free."
			(weakOop == nilObj or: [(self isIntegerObject: weakOop) or:[weakOop < youngStart]])

				ifFalse: ["Check if the object is being collected. 
					If the weak reference points  
					* backward: check if the weakOops chunk is free
					* forward: check if the weakOoop has been marked by GC"
					weakOop < oop
						ifTrue: [chunk := self chunkFromOop: weakOop.
							oopGone := ((self longAt: chunk) bitAnd: TypeMask) = HeaderTypeFree]
						ifFalse: [oopGone := (self isMarked: weakOop) not].
					oopGone ifTrue: ["Store nil in the pointer and signal the  interpreter"
							self longAt: oop + i put: nilObj.
							nonWeakCnt >= 2 ifTrue: [ self weakFinalizerCheck: oop ].
							self signalFinalization: oop]]]
