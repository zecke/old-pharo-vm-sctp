message sending
handleMNU: selectorIndex InMachineCodeTo: rcvr classForMessage: classForMessage
	"A message send from either an open PIC or an unlinked send has
	 not been understood.  Execute the relevant resulting MNU method."
	| errSelIdx classForThisMessage |
	<var: #cogMethod type: #'CogMethod *'>
	self assert: ((objectMemory isIntegerObject: rcvr) or: [objectMemory addressCouldBeObj: rcvr]).
	instructionPointer := self popStack.
	self createActualMessageTo: classForMessage.
	messageSelector := objectMemory splObj: selectorIndex.
	(self lookupInMethodCacheSel: messageSelector class: lkupClass)
		ifTrue:"check for coggability because method is in the cache"
			[self
				ifAppropriateCompileToNativeCode: newMethod
				selector: messageSelector]
		ifFalse:
			[errSelIdx := self lookupMethodNoMNUEtcInClass: (classForThisMessage := lkupClass).
			 errSelIdx ~= 0 ifTrue:
				[selectorIndex = SelectorDoesNotUnderstand ifTrue:
					[self error: 'Recursive not understood error encountered'].
				 self push: instructionPointer.
				 ^self handleMNU: errSelIdx InMachineCodeTo: rcvr classForMessage: classForThisMessage]].
	(self maybeMethodHasCogMethod: newMethod) ifTrue:
		[self push: instructionPointer.
		 self executeCogMethodFromUnlinkedSend: (self cogMethodOf: newMethod)
			 withReceiver: rcvr.
		 "NOTREACHED"
		 self assert: false].
	^self interpretMethodFromMachineCode
	"NOTREACHED"