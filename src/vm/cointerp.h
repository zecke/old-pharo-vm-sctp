
/*** Function Prototypes ***/
EXPORT(sqInt) activeProcess(void);
EXPORT(sqInt) addressCouldBeObj(sqInt address);
EXPORT(sqInt) addressCouldBeOop(sqInt address);
EXPORT(usqInt) argumentCountAddress(void);
EXPORT(sqInt) argumentCountOfMethodHeader(sqInt header);
EXPORT(sqInt) argumentCountOf(sqInt methodPointer);
EXPORT(void) assertValidMachineCodeFrame(sqInt instrPtr);
EXPORT(void) beRootIfOld(sqInt oop);
EXPORT(sqInt) byteLengthOf(sqInt obj);
EXPORT(sqInt) byteSizeOf(sqInt oop);
EXPORT(sqInt) byteSwapped(sqInt w);
EXPORT(void) callForCogCompiledCodeCompaction(void);
EXPORT(sqInt) canContextSwitchIfActivatingheader(sqInt theMethod, sqInt methodHeader);
EXPORT(void) ceActivateFailingPrimitiveMethod(sqInt aPrimitiveMethod);
EXPORT(sqInt) ceActiveContext(void);
EXPORT(sqInt) ceBaseFrameReturn(sqInt returnValue);
EXPORT(sqInt) ceCannotResume(void);
EXPORT(void) ceCheckForInterrupts(void);
EXPORT(void) ceCheckProfileTick(void);
EXPORT(sqInt) ceContextinstVar(sqInt maybeContext, sqInt slotIndex);
EXPORT(sqInt) ceContextinstVarvalue(sqInt maybeMarriedContext, sqInt slotIndex, sqInt anOop);
EXPORT(sqInt) ceCounterTripped(sqInt condition);
EXPORT(sqInt) ceDynamicSuperSendtonumArgs(sqInt selector, sqInt rcvr, sqInt numArgs);
EXPORT(sqInt) ceExplicitReceiverAt(sqInt level);
EXPORT(sqInt) ceInterpretMethodFromPICreceiver(sqInt aMethodObj, sqInt rcvr);
EXPORT(void) ceMNUFromPICMNUMethodreceiver(sqInt aMethodObj, sqInt rcvr);
EXPORT(sqInt) ceNewArraySlotSize(sqInt slotSize);
EXPORT(sqInt) ceNonLocalReturn(sqInt returnValue);
EXPORT(sqInt) cePositive32BitIntegerFor(usqInt anInteger);
EXPORT(sqInt) ceReturnToInterpreter(sqInt anOop);
EXPORT(sqInt) ceSendAborttonumArgs(sqInt selector, sqInt rcvr, sqInt numArgs);
EXPORT(sqInt) ceSendFromInLineCacheMiss(CogMethod *oPIC);
EXPORT(sqInt) ceSendMustBeBoolean(sqInt anObject);
EXPORT(sqInt) ceSendsupertonumArgs(sqInt selector, sqInt superNormalBar, sqInt rcvr, sqInt numArgs);
EXPORT(void) ceStackOverflow(sqInt contextSwitchIfNotNil);
EXPORT(sqInt) ceStoreCheck(sqInt anOop);
EXPORT(void) ceTraceBlockActivation(void);
EXPORT(void) ceTraceLinkedSend(sqInt theReceiver);
EXPORT(void) ceTraceStoreOfinto(sqInt aValue, sqInt anObject);
EXPORT(sqInt) characterTable(void);
EXPORT(sqInt) checkAllAccessibleObjectsOkay(void);
EXPORT(void) checkAssertsEnabledInCoInterpreter(void);
EXPORT(sqInt) checkedLongAt(sqInt byteAddress);
EXPORT(sqInt) checkOkayInterpreterObjects(sqInt writeBack);
EXPORT(sqInt) checkOkayOop(usqInt oop);
EXPORT(sqInt) checkOopHasOkayClass(sqInt obj);
EXPORT(sqInt) classArray(void);
EXPORT(sqInt) classFloat(void);
EXPORT(sqInt) classFloatCompactIndex(void);
EXPORT(sqInt) classHeader(sqInt oop);
EXPORT(sqInt) classSmallInteger(void);
EXPORT(void) clearTraceLog(void);
EXPORT(CogMethod *) cogMethodOf(sqInt aMethodOop);
EXPORT(sqInt) compactClassAt(sqInt ccIndex);
EXPORT(sqInt) compactClassIndexOfHeader(sqInt header);
EXPORT(sqInt) compactClassIndexOf(sqInt oop);
EXPORT(void) compilationBreakpointFor(sqInt selectorOop);
EXPORT(sqInt) createClosureNumArgsnumCopiedstartpc(sqInt numArgs, sqInt numCopied, sqInt initialIP);
EXPORT(char *) cStringOrNullFor(sqInt oop);
EXPORT(sqInt) doSignalSemaphoreWithIndex(sqInt index);
EXPORT(void) dumpPrimTraceLog(void);
EXPORT(void) dumpTraceLog(void);
EXPORT(sqInt) eeInstantiateClassindexableSize(sqInt classPointer, sqInt size);
extern void error(char *s);
EXPORT(void) executeCogMethodFromLinkedSendwithReceiver(CogMethod *cogMethod, sqInt rcvr);
EXPORT(void) executeCogMethodFromLinkedSendwithReceiverandCacheTag(CogMethod *cogMethod, sqInt rcvr, sqInt cacheTag);
EXPORT(sqInt) failed(void);
EXPORT(sqInt) falseObject(void);
EXPORT(sqInt) fetchByteofObject(sqInt byteIndex, sqInt oop);
EXPORT(sqInt) fetchPointerofObject(sqInt fieldIndex, sqInt oop);
EXPORT(void) findStringBeginningWith(char *aCString);
EXPORT(void) findString(char *aCString);
EXPORT(void *) firstFixedField(sqInt oop);
EXPORT(void) flushExternalPrimitiveOf(sqInt methodObj);
EXPORT(sqInt) formatOfClass(sqInt classPointer);
EXPORT(usqInt) framePointerAddress(void);
EXPORT(usqInt) freeStartAddress(void);
EXPORT(void (*functionPointerForCompiledMethodprimitiveIndex(sqInt methodObj, sqInt primIndex))(void)) ;
EXPORT(void (*functionPointerForinClass(sqInt primIdx,sqInt theClass))(void)) ;
EXPORT(usqLong) getNextWakeupUsecs(void);
EXPORT(sqInt *) getStackPointer(void);
EXPORT(sqInt) headerIndicatesAlternateBytecodeSet(sqInt methodHeader);
EXPORT(sqInt) headerOf(sqInt methodPointer);
EXPORT(sqInt) highBit(usqInt anUnsignedValue);
EXPORT(void) ifValidWriteBackStackPointersSaveTo(void *theCFP, void *theCSP, char **savedFPP, char **savedSPP);
EXPORT(sqInt) implicitReceiverFormixinimplementing(sqInt rcvr, sqInt mixin, sqInt selector);
EXPORT(sqInt) initialPCForHeadermethod(sqInt methodHeader, sqInt theMethod);
EXPORT(sqInt) instanceSizeOf(sqInt classObj);
EXPORT(sqInt) instantiateClassindexableSize(sqInt classPointer, sqInt size);
EXPORT(usqInt) instructionPointerAddress(void);
EXPORT(usqInt) interpretAddress(void);
EXPORT(sqInt) isCogMethodReference(sqInt methodHeader);
EXPORT(sqInt) isCompiledMethod(sqInt oop);
EXPORT(sqInt) isIntegerValue(sqInt intValue);
EXPORT(sqInt) isMarked(sqInt oop);
EXPORT(sqInt) isNonIntegerObject(sqInt objectPointer);
EXPORT(sqInt) isOopCompiledMethod(sqInt oop);
EXPORT(sqInt) isOopImmutable(sqInt anOop);
EXPORT(sqInt) isOopMutable(sqInt anOop);
EXPORT(sqInt) isQuickPrimitiveIndex(sqInt anInteger);
EXPORT(sqInt) isReadMediatedContextInstVarIndex(sqInt index);
EXPORT(sqInt) isReallyYoungObject(sqInt obj);
EXPORT(sqInt) isWriteMediatedContextInstVarIndex(sqInt index);
EXPORT(sqInt) isYoungObject(sqInt obj);
EXPORT(sqInt) isYoung(sqInt oop);
EXPORT(sqInt) isKindOfClass(sqInt oop, sqInt aClass);
EXPORT(sqInt) lastPointerOf(sqInt oop);
EXPORT(sqInt) leakCheckBecome(void);
EXPORT(sqInt) leakCheckFullGC(void);
EXPORT(sqInt) leakCheckIncrementalGC(void);
EXPORT(sqInt) lengthOf(sqInt oop);
EXPORT(sqInt) literalCountOfHeader(sqInt headerPointer);
EXPORT(sqInt) literalofMethod(sqInt offset, sqInt methodPointer);
EXPORT(void) longPrintOop(sqInt oop);
EXPORT(void) longPrintReferencesTo(sqInt anOop);
EXPORT(sqInt) longStoreBytecodeForHeader(sqInt methodHeader);
EXPORT(sqInt) lookupreceiver(sqInt selector, sqInt rcvr);
EXPORT(void) markActiveMethodsAndReferents(void);
EXPORT(void) markAndTrace(sqInt oop);
EXPORT(sqInt) maybeSplObj(sqInt index);
EXPORT(void *) methodCacheAddress(void);
EXPORT(sqInt) methodClassAssociationOf(sqInt methodPointer);
EXPORT(sqInt) methodHasCogMethod(sqInt aMethodOop);
EXPORT(sqInt) methodPrimitiveIndex(void);
EXPORT(sqInt) methodShouldBeCogged(sqInt aMethodObj);
EXPORT(sqInt) methodUsesAlternateBytecodeSet(sqInt aMethodObj);
EXPORT(CogMethod *) mframeHomeMethodExport(void);
EXPORT(CogMethod *) mframeHomeMethod(char *theFP);
EXPORT(sqInt) mMethodClass(void);
EXPORT(usqInt) newMethodAddress(void);
EXPORT(usqInt) nextProfileTickAddress(void);
EXPORT(sqInt) nilObject(void);
EXPORT(sqInt) noAssertHeaderOf(sqInt methodPointer);
EXPORT(sqInt) nullHeaderForMachineCodeMethod(void);
EXPORT(sqInt) objectAfter(sqInt oop);
EXPORT(sqInt) objectBefore(sqInt address);
EXPORT(sqInt) objectExactlyBefore(sqInt oop);
EXPORT(sqInt) objectIsOld(sqInt anObject);
EXPORT(sqInt) popRemappableOop(void);
EXPORT(sqInt) popStack(void);
EXPORT(sqInt) primErrTable(void);
EXPORT(usqInt) primFailCodeAddress(void);
EXPORT(void) primitiveClosureValueNoContextSwitch(void);
EXPORT(sqInt) primitiveErrorTable(void);
EXPORT(sqInt) primitiveFail(void);
EXPORT(usqInt) primitiveFailAddress(void);
EXPORT(sqInt) primitiveFailFor(sqInt reasonCode);
EXPORT(sqInt) primitiveFailureCode(void);
EXPORT(usqInt) primitiveFunctionPointerAddress(void);
EXPORT(sqInt) primitiveIndexOfMethodheader(sqInt theMethod, sqInt methodHeader);
EXPORT(sqInt) primitiveIndexOf(sqInt methodPointer);
EXPORT(sqInt) primitivePropertyFlags(sqInt primIndex);
EXPORT(void *) primTraceLogAddress(void);
EXPORT(usqInt) primTraceLogIndexAddress(void);
EXPORT(void) printAllStacks(void);
EXPORT(void) printCallStackOf(sqInt aContextOrProcess);
EXPORT(void) printChar(sqInt aByte);
EXPORT(void) printCogMethod(CogMethod *cogMethod);
EXPORT(void) printFrameWithSP(char *theFP, char *theSP);
EXPORT(void) printHex(sqInt n);
EXPORT(void) printInstancesOf(sqInt aClassOop);
EXPORT(void) printMethodDictionaryOf(sqInt behavior);
EXPORT(void) printMethodDictionary(sqInt dictionary);
EXPORT(void) printMethodReferencesTo(sqInt anOop);
EXPORT(void) printObjectsFromto(sqInt startAddress, sqInt endAddress);
EXPORT(void) printProcessStack(sqInt aProcess);
EXPORT(void) printProcsOnList(sqInt procList);
EXPORT(void) printReferencesTo(sqInt anOop);
EXPORT(void) printWronglySizedContexts(sqInt printContexts);
EXPORT(void) print(char *s);
EXPORT(void) pushRemappableOop(sqInt oop);
EXPORT(sqInt) quickPrimitiveConstantFor(sqInt aQuickPrimitiveIndex);
EXPORT(int (*quickPrimitiveGeneratorFor(sqInt aQuickPrimitiveIndex))(void)) ;
EXPORT(sqInt) quickPrimitiveInstVarIndexFor(sqInt primIndex);
EXPORT(sqInt) rawHeaderOf(sqInt methodPointer);
EXPORT(void) rawHeaderOfput(sqInt methodOop, sqInt cogMethodOrMethodHeader);
EXPORT(sqInt) remap(sqInt oop);
EXPORT(void) reportMinimumUnusedHeadroom(void);
EXPORT(usqInt) scavengeThresholdAddress(void);
EXPORT(void) scheduleIncrementalGC(void);
EXPORT(void) setBreakSelector(char *aString);
EXPORT(void) setNextWakeupUsecs(usqLong value);
EXPORT(void) shortPrintFrameAndNCallers(char *theFP, sqInt n);
EXPORT(sqInt) signalNoResume(sqInt aSemaphore);
EXPORT(usqInt) sizeOfAlienData(sqInt oop);
EXPORT(sqInt) sizeOfCallPrimitiveBytecode(sqInt methodHeader);
EXPORT(sqInt) sizeOfLongStoreTempBytecode(sqInt methodHeader);
EXPORT(sqInt) specialSelectorNumArgs(sqInt index);
EXPORT(sqInt) specialSelector(sqInt index);
EXPORT(sqInt) splObj(sqInt index);
EXPORT(usqInt) stackLimitAddress(void);
EXPORT(usqInt) stackPointerAddress(void);
EXPORT(sqInt) stackPositiveMachineIntegerValue(sqInt offset);
EXPORT(sqInt) stackSignedMachineIntegerValue(sqInt offset);
EXPORT(sqInt) stackTop(void);
EXPORT(sqInt) stackValue(sqInt offset);
EXPORT(void *) startOfAlienData(sqInt oop);
EXPORT(sqInt) startPCOfMethodHeader(sqInt aCompiledMethodHeader);
EXPORT(sqInt) startPCOfMethod(sqInt aCompiledMethod);
EXPORT(sqInt) storePointerUncheckedofObjectwithValue(sqInt fieldIndex, sqInt oop, sqInt valuePointer);
EXPORT(sqInt) stringForCString(const char *aCString);
EXPORT(sqInt) tempCountOf(sqInt methodPointer);
EXPORT(sqInt) temporaryCountOfMethodHeader(sqInt header);
EXPORT(void) tenuringIncrementalGC(void);
EXPORT(sqInt) topRemappableOop(void);
EXPORT(sqInt) trueObject(void);
EXPORT(void) updateStackZoneReferencesToCompiledCodePreCompaction(void);
extern void warning(char *s);
EXPORT(sqInt) withoutForwardingOnandsendToCogit(sqInt obj1, sqInt obj2, sqInt (*selector)(sqInt,sqInt));
EXPORT(sqInt) withoutForwardingOnandwithsendToCogit(sqInt obj1, sqInt obj2, sqInt aBool, sqInt (*selector)(sqInt,sqInt,sqInt));
EXPORT(usqInt) youngStartAddress(void);


/*** Global Variables ***/
VM_EXPORT char * breakSelector;
VM_EXPORT sqInt breakSelectorLength ;
VM_EXPORT sqInt checkForLeaks;
VM_EXPORT sqInt deferDisplayUpdates;
VM_EXPORT sqInt desiredCogCodeSize;
VM_EXPORT sqInt desiredEdenBytes;
VM_EXPORT sqInt desiredNumStackPages;
VM_EXPORT sqInt extraVMMemory;
VM_EXPORT sqInt inIOProcessEvents;
VM_EXPORT struct VirtualMachine* interpreterProxy;
VM_EXPORT sqInt maxLiteralCountForCompile ;
VM_EXPORT sqInt minBackwardJumpCountForCompile ;
VM_EXPORT jmp_buf reenterInterpreter;
VM_EXPORT volatile int sendTrace;
VM_EXPORT void * showSurfaceFn;
VM_EXPORT sqInt suppressHeartbeatFlag;


/*** Macros ***/
#define classFieldOffset() (0 - BaseHeaderSize)
#define compactClassFieldLSB() 12
#define compactClassFieldWidth() 5
#define compilationBreakpoint(sel, len) do { \
	if ((len) == breakSelectorLength \
	 && !strncmp((char *)((sel) + BaseHeaderSize), breakSelector, breakSelectorLength)) { \
		suppressHeartbeatFlag = 1; \
		compilationBreakpointFor(sel); \
	} \
} while (0)
#define instFormatFieldLSB() 8
#define instFormatFieldWidth() 4

